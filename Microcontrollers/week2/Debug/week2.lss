
week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001e8  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6d  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a75  00000000  00000000  00001211  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad3  00000000  00000000  00001c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000776a  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000642  00000000  00000000  0000a056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000a698  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002b92  00000000  00000000  0000a730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	b3 c0       	rjmp	.+358    	; 0x16c <__vector_1>
   6:	00 00       	nop
   8:	da c0       	rjmp	.+436    	; 0x1be <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	88 d0       	rcall	.+272    	; 0x1d4 <main>
  c4:	8f c0       	rjmp	.+286    	; 0x1e4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
{
	PORTC |= (1<<LCD_E);	// E high
  c8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_strobe_lcd_e+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_strobe_lcd_e+0xc>
  d4:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_strobe_lcd_e+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_strobe_lcd_e+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
  e6:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  ec:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  ee:	c0 e2       	ldi	r28, 0x20	; 32
  f0:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  f2:	ea df       	rcall	.-44     	; 0xc8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
  f4:	c5 bb       	out	0x15, r28	; 21
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
  f8:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
  fa:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  fc:	e5 df       	rcall	.-54     	; 0xc8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  fe:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 100:	e3 df       	rcall	.-58     	; 0xc8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 102:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 104:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 106:	e0 df       	rcall	.-64     	; 0xc8 <lcd_strobe_lcd_e>
 108:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 10a:	de df       	rcall	.-68     	; 0xc8 <lcd_strobe_lcd_e>
 10c:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 10e:	85 bb       	out	0x15, r24	; 21
 110:	db df       	rcall	.-74     	; 0xc8 <lcd_strobe_lcd_e>
}
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 11a:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 11c:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 11e:	d4 df       	rcall	.-88     	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 120:	c2 95       	swap	r28
 122:	c0 7f       	andi	r28, 0xF0	; 240
 124:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
 126:	aa 9a       	sbi	0x15, 2	; 21
 128:	cf df       	rcall	.-98     	; 0xc8 <lcd_strobe_lcd_e>
}
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	29 f0       	breq	.+10     	; 0x144 <lcd_write_string+0x16>
 13a:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
 13c:	ec df       	rcall	.-40     	; 0x116 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 13e:	89 91       	ld	r24, Y+
 140:	81 11       	cpse	r24, r1
 142:	fc cf       	rjmp	.-8      	; 0x13c <lcd_write_string+0xe>
		lcd_write_data(*str);
	}
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 14e:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 150:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 152:	ba df       	rcall	.-140    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 154:	c2 95       	swap	r28
 156:	c0 7f       	andi	r28, 0xF0	; 240
 158:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
 15a:	aa 98       	cbi	0x15, 2	; 21
 15c:	b5 df       	rcall	.-150    	; 0xc8 <lcd_strobe_lcd_e>
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_clear_screen>:
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}

void lcd_clear_screen() {
	lcd_write_command(0x01); //clear
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	f2 df       	rcall	.-28     	; 0x14a <lcd_write_command>
	lcd_write_command(0x02); //cursor and screen home
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	f0 cf       	rjmp	.-32     	; 0x14a <lcd_write_command>
 16a:	08 95       	ret

0000016c <__vector_1>:
		_delay_ms( 8 );		// library function (max 30 ms at 8MHz)
	}
}

ISR( INT0_vect )
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
    PORTA = (1<<b2Index);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <__data_end>
 182:	02 c0       	rjmp	.+4      	; 0x188 <__vector_1+0x1c>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <__vector_1+0x18>
 18c:	8b bb       	out	0x1b, r24	; 27
	b2Index++;
 18e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 192:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 196:	01 96       	adiw	r24, 0x01	; 1
	if (b2Index > 7) {
 198:	88 30       	cpi	r24, 0x08	; 8
 19a:	91 05       	cpc	r25, r1
 19c:	2c f4       	brge	.+10     	; 0x1a8 <__vector_1+0x3c>
}

ISR( INT0_vect )
{
    PORTA = (1<<b2Index);
	b2Index++;
 19e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__vector_1+0x44>
	if (b2Index > 7) {
		b2Index = 0;
 1a8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 1ac:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
}
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_2>:

ISR( INT1_vect )
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
    PORTD &= ~(1<<5);
 1c8:	95 98       	cbi	0x12, 5	; 18
	
}
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:

int main( void )
{
	// Init I/O
	DDRD = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init_4bits_mode();
 1d8:	86 df       	rcall	.-244    	; 0xe6 <init_4bits_mode>

	// Write sample string
//	lcd_write_string("     a");
	lcd_clear_screen();
 1da:	c3 df       	rcall	.-122    	; 0x162 <lcd_clear_screen>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
	//lcd_set_cursor(0, 9);
	lcd_write_string("aa");
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	a6 df       	rcall	.-180    	; 0x12e <lcd_write_string>
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <main+0xe>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>


week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa5  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fb  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000677  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007682  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000376  00000000  00000000  000094f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000986c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000000be  00000000  00000000  000098bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__vector_2>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c0 00       	.word	0x00c0	; ????
  8e:	c3 00       	.word	0x00c3	; ????
  90:	c6 00       	.word	0x00c6	; ????
  92:	c9 00       	.word	0x00c9	; ????
  94:	cc 00       	.word	0x00cc	; ????
  96:	cf 00       	.word	0x00cf	; ????
  98:	d2 00       	.word	0x00d2	; ????
  9a:	d5 00       	.word	0x00d5	; ????
  9c:	d8 00       	.word	0x00d8	; ????
  9e:	db 00       	.word	0x00db	; ????
  a0:	de 00       	.word	0x00de	; ????
  a2:	e1 00       	.word	0x00e1	; ????
  a4:	e4 00       	.word	0x00e4	; ????
  a6:	e7 00       	.word	0x00e7	; ????
  a8:	ea 00       	.word	0x00ea	; ????
  aa:	ed 00       	.word	0x00ed	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e5       	ldi	r30, 0x56	; 86
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a0 30       	cpi	r26, 0x00	; 0
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a2 30       	cpi	r26, 0x02	; 2
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	a2 d0       	rcall	.+324    	; 0x228 <main>
  e4:	b6 c0       	rjmp	.+364    	; 0x252 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <wait>:
		}
	}
}

void opdrachtB5() {
	init();
  e8:	18 16       	cp	r1, r24
  ea:	19 06       	cpc	r1, r25
  ec:	6c f4       	brge	.+26     	; 0x108 <wait+0x20>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	ef ec       	ldi	r30, 0xCF	; 207
  f4:	f7 e0       	ldi	r31, 0x07	; 7
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <wait+0xe>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <wait+0x14>
  fc:	00 00       	nop
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	82 17       	cp	r24, r18
 104:	93 07       	cpc	r25, r19
 106:	a9 f7       	brne	.-22     	; 0xf2 <wait+0xa>
 108:	08 95       	ret

0000010a <__vector_1>:
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_end>
 120:	02 c0       	rjmp	.+4      	; 0x126 <__vector_1+0x1c>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <__vector_1+0x18>
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 130:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	91 05       	cpc	r25, r1
 13a:	2c f4       	brge	.+10     	; 0x146 <__vector_1+0x3c>
 13c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 144:	04 c0       	rjmp	.+8      	; 0x14e <__vector_1+0x44>
 146:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_2>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	95 98       	cbi	0x12, 5	; 18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <displayDigit>:
	
}

//gigacase
void displayDigit(int digit) {
	switch (digit) {
 172:	80 31       	cpi	r24, 0x10	; 16
 174:	91 05       	cpc	r25, r1
 176:	a0 f5       	brcc	.+104    	; 0x1e0 <displayDigit+0x6e>
 178:	fc 01       	movw	r30, r24
 17a:	ea 5b       	subi	r30, 0xBA	; 186
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	60 c0       	rjmp	.+192    	; 0x240 <__tablejump2__>
		case 0:
			PORTC = 0b00111111;
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	85 bb       	out	0x15, r24	; 21
			break;
 184:	08 95       	ret
		case 1:
			PORTC = 0b00000110;
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	85 bb       	out	0x15, r24	; 21
			break;
 18a:	08 95       	ret
		case 2:
			PORTC = 0b01011011;
 18c:	8b e5       	ldi	r24, 0x5B	; 91
 18e:	85 bb       	out	0x15, r24	; 21
			break;
 190:	08 95       	ret
		case 3:
			PORTC = 0b01001111;
 192:	8f e4       	ldi	r24, 0x4F	; 79
 194:	85 bb       	out	0x15, r24	; 21
			break;
 196:	08 95       	ret
		case 4:
			PORTC = 0b01100110;
 198:	86 e6       	ldi	r24, 0x66	; 102
 19a:	85 bb       	out	0x15, r24	; 21
			break;
 19c:	08 95       	ret
		case 5:
			PORTC = 0b01101101;
 19e:	8d e6       	ldi	r24, 0x6D	; 109
 1a0:	85 bb       	out	0x15, r24	; 21
			break;
 1a2:	08 95       	ret
		case 6:
			PORTC = 0b01111101;
 1a4:	8d e7       	ldi	r24, 0x7D	; 125
 1a6:	85 bb       	out	0x15, r24	; 21
			break;
 1a8:	08 95       	ret
		case 7:
			PORTC = 0b00000111;
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	85 bb       	out	0x15, r24	; 21
			break;
 1ae:	08 95       	ret
		case 8:
			PORTC = 0b01111111;
 1b0:	8f e7       	ldi	r24, 0x7F	; 127
 1b2:	85 bb       	out	0x15, r24	; 21
			break;
 1b4:	08 95       	ret
		case 9:
			PORTC = 0b01101111;
 1b6:	8f e6       	ldi	r24, 0x6F	; 111
 1b8:	85 bb       	out	0x15, r24	; 21
			break;
 1ba:	08 95       	ret
		case 10:
			PORTC = 0b01110111;
 1bc:	87 e7       	ldi	r24, 0x77	; 119
 1be:	85 bb       	out	0x15, r24	; 21
			break;
 1c0:	08 95       	ret
		case 11:
			PORTC = 0b01111100;
 1c2:	8c e7       	ldi	r24, 0x7C	; 124
 1c4:	85 bb       	out	0x15, r24	; 21
			break;
 1c6:	08 95       	ret
		case 12:
			PORTC = 0b00111001;
 1c8:	89 e3       	ldi	r24, 0x39	; 57
 1ca:	85 bb       	out	0x15, r24	; 21
			break;
 1cc:	08 95       	ret
		case 13:
			PORTC = 0b01011110;
 1ce:	8e e5       	ldi	r24, 0x5E	; 94
 1d0:	85 bb       	out	0x15, r24	; 21
			break;
 1d2:	08 95       	ret
		case 14:
			PORTC = 0b01111001;
 1d4:	89 e7       	ldi	r24, 0x79	; 121
 1d6:	85 bb       	out	0x15, r24	; 21
			break;
 1d8:	08 95       	ret
		case 15:
			PORTC = 0b01110001;
 1da:	81 e7       	ldi	r24, 0x71	; 113
 1dc:	85 bb       	out	0x15, r24	; 21
			break;
 1de:	08 95       	ret
		default:
			PORTC = 0b11111001; //error
 1e0:	89 ef       	ldi	r24, 0xF9	; 249
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	08 95       	ret

000001e6 <opdrachtB3>:
	b2Index = 0;
	DDRA = 0b11111111;
}

void opdrachtB3() {
	DDRA = 0b00000000;
 1e6:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b11111111;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	84 bb       	out	0x14, r24	; 20
	int currentdigit = 0;
	
	displayDigit(0);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	c0 df       	rcall	.-128    	; 0x172 <displayDigit>
}

void opdrachtB3() {
	DDRA = 0b00000000;
	DDRC = 0b11111111;
	int currentdigit = 0;
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (currentdigit > 15) {
			currentdigit = -1;
		}*/
		
		if (PINA & (1 << 0) && PINA & (1 << 1)) {
 1f6:	c8 9b       	sbis	0x19, 0	; 25
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <opdrachtB3+0x24>
 1fa:	c9 9b       	sbis	0x19, 1	; 25
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <opdrachtB3+0x24>
			//up and down pressed
			currentdigit = 0;
			displayDigit(currentdigit);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	b7 df       	rcall	.-146    	; 0x172 <displayDigit>
			currentdigit = -1;
		}*/
		
		if (PINA & (1 << 0) && PINA & (1 << 1)) {
			//up and down pressed
			currentdigit = 0;
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
			displayDigit(currentdigit);
 208:	0b c0       	rjmp	.+22     	; 0x220 <opdrachtB3+0x3a>
		} else if (PINA & (1 << 0)) {
 20a:	c8 9b       	sbis	0x19, 0	; 25
 20c:	04 c0       	rjmp	.+8      	; 0x216 <opdrachtB3+0x30>
			//down pressed
			currentdigit--;
			displayDigit(currentdigit);
 20e:	21 97       	sbiw	r28, 0x01	; 1
 210:	ce 01       	movw	r24, r28
 212:	af df       	rcall	.-162    	; 0x172 <displayDigit>
 214:	05 c0       	rjmp	.+10     	; 0x220 <opdrachtB3+0x3a>
		} else if (PINA & (1 << 1)) {
 216:	c9 9b       	sbis	0x19, 1	; 25
			//up pressed
			currentdigit++;
 218:	03 c0       	rjmp	.+6      	; 0x220 <opdrachtB3+0x3a>
			displayDigit(currentdigit);
 21a:	21 96       	adiw	r28, 0x01	; 1
 21c:	ce 01       	movw	r24, r28
		}
		wait(250);
 21e:	a9 df       	rcall	.-174    	; 0x172 <displayDigit>
 220:	8a ef       	ldi	r24, 0xFA	; 250
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	61 df       	rcall	.-318    	; 0xe8 <wait>
	}
 226:	e7 cf       	rjmp	.-50     	; 0x1f6 <opdrachtB3+0x10>

00000228 <main>:

int main( void )
{
	//board_init();
	// Init I/O
	DDRD = 0xF0;			// PORTD(7:4) output, PORTD(3:0) input	
 228:	80 ef       	ldi	r24, 0xF0	; 240
 22a:	81 bb       	out	0x11, r24	; 17

	// Init Interrupt hardware
	EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
 22c:	ea e6       	ldi	r30, 0x6A	; 106
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8b 60       	ori	r24, 0x0B	; 11
 234:	80 83       	st	Z, r24
	EIMSK |= 0b0000011;//0x03;			// Enable INT1 & INT0
 236:	89 b7       	in	r24, 0x39	; 57
 238:	83 60       	ori	r24, 0x03	; 3
 23a:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	sei();				
 23c:	78 94       	sei

	//opdrachtB2();
	opdrachtB3();
 23e:	d3 df       	rcall	.-90     	; 0x1e6 <opdrachtB3>

00000240 <__tablejump2__>:
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	00 24       	eor	r0, r0
 246:	00 1c       	adc	r0, r0
 248:	0b be       	out	0x3b, r0	; 59
 24a:	07 90       	elpm	r0, Z+
 24c:	f6 91       	elpm	r31, Z
 24e:	e0 2d       	mov	r30, r0
 250:	09 94       	ijmp

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>

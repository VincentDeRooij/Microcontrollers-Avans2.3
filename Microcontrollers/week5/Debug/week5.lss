
week5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f8  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094d  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ce  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000026fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e6  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000574  00000000  00000000  00002e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	db d0       	rcall	.+438    	; 0x250 <main>
  9a:	e0 c0       	rjmp	.+448    	; 0x25c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
		setValueForDigitDisplay(3, indexThirth);
		setValueForDigitDisplay(4, indexFourth);
		
		wait(100);
	}
}
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <setDecodeModeOn>:
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e7 df       	rcall	.-50     	; 0xd6 <spi_slaveSelect>
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	e1 df       	rcall	.-62     	; 0xce <spi_write>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	df df       	rcall	.-66     	; 0xce <spi_write>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	ed cf       	rjmp	.-38     	; 0xee <spi_slaveDeSelect>
 114:	08 95       	ret

00000116 <displayDriverInit>:
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	de df       	rcall	.-68     	; 0xd6 <spi_slaveSelect>
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	d8 df       	rcall	.-80     	; 0xce <spi_write>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	d6 df       	rcall	.-84     	; 0xce <spi_write>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	e4 df       	rcall	.-56     	; 0xee <spi_slaveDeSelect>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	d6 df       	rcall	.-84     	; 0xd6 <spi_slaveSelect>
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	d0 df       	rcall	.-96     	; 0xce <spi_write>
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	ce df       	rcall	.-100    	; 0xce <spi_write>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	dc df       	rcall	.-72     	; 0xee <spi_slaveDeSelect>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	ce df       	rcall	.-100    	; 0xd6 <spi_slaveSelect>
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	c8 df       	rcall	.-112    	; 0xce <spi_write>
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	c6 df       	rcall	.-116    	; 0xce <spi_write>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	d4 df       	rcall	.-88     	; 0xee <spi_slaveDeSelect>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	c6 df       	rcall	.-116    	; 0xd6 <spi_slaveSelect>
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	c0 df       	rcall	.-128    	; 0xce <spi_write>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	be df       	rcall	.-132    	; 0xce <spi_write>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	cc cf       	rjmp	.-104    	; 0xee <spi_slaveDeSelect>
 156:	08 95       	ret

00000158 <setValueForDigitDisplay>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	d8 2f       	mov	r29, r24
 15e:	c6 2f       	mov	r28, r22
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	b9 df       	rcall	.-142    	; 0xd6 <spi_slaveSelect>
 164:	8d 2f       	mov	r24, r29
 166:	b3 df       	rcall	.-154    	; 0xce <spi_write>
 168:	8c 2f       	mov	r24, r28
 16a:	b1 df       	rcall	.-158    	; 0xce <spi_write>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	bf df       	rcall	.-130    	; 0xee <spi_slaveDeSelect>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <countUp>:
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <countUp+0x30>
 180:	df 5f       	subi	r29, 0xFF	; 255
 182:	d9 30       	cpi	r29, 0x09	; 9
 184:	41 f4       	brne	.+16     	; 0x196 <countUp+0x20>
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	09 30       	cpi	r16, 0x09	; 9
 18a:	21 f4       	brne	.+8      	; 0x194 <countUp+0x1e>
 18c:	1f 5f       	subi	r17, 0xFF	; 255
 18e:	00 e0       	ldi	r16, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	01 c0       	rjmp	.+2      	; 0x196 <countUp+0x20>
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	19 30       	cpi	r17, 0x09	; 9
 198:	29 f4       	brne	.+10     	; 0x1a4 <countUp+0x2e>
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <countUp+0x30>
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	6c 2f       	mov	r22, r28
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	d5 df       	rcall	.-86     	; 0x158 <setValueForDigitDisplay>
 1ae:	6d 2f       	mov	r22, r29
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	d2 df       	rcall	.-92     	; 0x158 <setValueForDigitDisplay>
 1b4:	60 2f       	mov	r22, r16
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	cf df       	rcall	.-98     	; 0x158 <setValueForDigitDisplay>
 1ba:	61 2f       	mov	r22, r17
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	cc df       	rcall	.-104    	; 0x158 <setValueForDigitDisplay>
 1c0:	84 e6       	ldi	r24, 0x64	; 100
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	6c df       	rcall	.-296    	; 0x9e <wait>
 1c6:	c9 30       	cpi	r28, 0x09	; 9
 1c8:	71 f7       	brne	.-36     	; 0x1a6 <countUp+0x30>
 1ca:	da cf       	rjmp	.-76     	; 0x180 <countUp+0xa>

000001cc <clearDisplays>:

void clearDisplays()
{
 1cc:	cf 93       	push	r28
	setDecodeModeOn();
 1ce:	9a df       	rcall	.-204    	; 0x104 <setDecodeModeOn>
 1d0:	c1 e0       	ldi	r28, 0x01	; 1
	for (int i = 1; i <= 4; i++)
	{
		setValueForDigitDisplay(i, 15);
 1d2:	6f e0       	ldi	r22, 0x0F	; 15
 1d4:	8c 2f       	mov	r24, r28
 1d6:	c0 df       	rcall	.-128    	; 0x158 <setValueForDigitDisplay>
 1d8:	cf 5f       	subi	r28, 0xFF	; 255
}

void clearDisplays()
{
	setDecodeModeOn();
	for (int i = 1; i <= 4; i++)
 1da:	c5 30       	cpi	r28, 0x05	; 5
 1dc:	d1 f7       	brne	.-12     	; 0x1d2 <clearDisplays+0x6>
	{
		setValueForDigitDisplay(i, 15);
	}
}
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <clearDisplay>:

void clearDisplay(unsigned char display)
{
	setValueForDigitDisplay(display, 15);
 1e2:	6f e0       	ldi	r22, 0x0F	; 15
 1e4:	b9 cf       	rjmp	.-142    	; 0x158 <setValueForDigitDisplay>
 1e6:	08 95       	ret

000001e8 <showMinusDemo>:
		char indexThirth = 9; // display 3
		char indexFourth = 9; // display 4
		
		indexFourth = minusToken;
		
		for (int i = 999; i > 0; i-- )
 1e8:	c7 ee       	ldi	r28, 0xE7	; 231
 1ea:	d3 e0       	ldi	r29, 0x03	; 3
{
		char minusToken = 10;
	
		char indexFirst = 9; // display 1
		char indexSecond = 9; // display 2
		char indexThirth = 9; // display 3
 1ec:	0f 2e       	mov	r0, r31
 1ee:	f9 e0       	ldi	r31, 0x09	; 9
 1f0:	ff 2e       	mov	r15, r31
 1f2:	f0 2d       	mov	r31, r0
void showMinusDemo() 
{
		char minusToken = 10;
	
		char indexFirst = 9; // display 1
		char indexSecond = 9; // display 2
 1f4:	09 e0       	ldi	r16, 0x09	; 9

void showMinusDemo() 
{
		char minusToken = 10;
	
		char indexFirst = 9; // display 1
 1f6:	19 e0       	ldi	r17, 0x09	; 9
		
		indexFourth = minusToken;
		
		for (int i = 999; i > 0; i-- )
		{
			if (i <= 99)
 1f8:	c4 36       	cpi	r28, 0x64	; 100
 1fa:	d1 05       	cpc	r29, r1
 1fc:	3c f4       	brge	.+14     	; 0x20c <showMinusDemo+0x24>
			{
				clearDisplay(4);
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	f0 df       	rcall	.-32     	; 0x1e2 <clearDisplay>
				indexThirth = minusToken;	
 202:	0f 2e       	mov	r0, r31
 204:	fa e0       	ldi	r31, 0x0A	; 10
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
 20a:	06 c0       	rjmp	.+12     	; 0x218 <showMinusDemo+0x30>
			} 
			else if (i <= 9)
 20c:	ca 30       	cpi	r28, 0x0A	; 10
 20e:	d1 05       	cpc	r29, r1
 210:	1c f4       	brge	.+6      	; 0x218 <showMinusDemo+0x30>
			{
				clearDisplay(3);
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	e6 df       	rcall	.-52     	; 0x1e2 <clearDisplay>
				indexSecond = minusToken;
 216:	0a e0       	ldi	r16, 0x0A	; 10
			}
			
			if (indexFirst == 0)
 218:	11 11       	cpse	r17, r1
 21a:	07 c0       	rjmp	.+14     	; 0x22a <showMinusDemo+0x42>
			{
				indexFirst = 9;
				indexSecond--;
 21c:	01 50       	subi	r16, 0x01	; 1
				if (indexSecond == 0)
 21e:	21 f4       	brne	.+8      	; 0x228 <showMinusDemo+0x40>
				{
					indexSecond = 9;
					indexThirth--;
 220:	fa 94       	dec	r15
			{
				indexFirst = 9;
				indexSecond--;
				if (indexSecond == 0)
				{
					indexSecond = 9;
 222:	09 e0       	ldi	r16, 0x09	; 9
				indexSecond = minusToken;
			}
			
			if (indexFirst == 0)
			{
				indexFirst = 9;
 224:	19 e0       	ldi	r17, 0x09	; 9
 226:	01 c0       	rjmp	.+2      	; 0x22a <showMinusDemo+0x42>
 228:	19 e0       	ldi	r17, 0x09	; 9
					if (indexThirth == 0)
					{
					}
				}
			}
			indexFirst--;
 22a:	11 50       	subi	r17, 0x01	; 1
			
			setValueForDigitDisplay(1, indexFirst); // value for digit 1;
 22c:	61 2f       	mov	r22, r17
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	93 df       	rcall	.-218    	; 0x158 <setValueForDigitDisplay>
			setValueForDigitDisplay(2, indexSecond);
 232:	60 2f       	mov	r22, r16
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 df       	rcall	.-224    	; 0x158 <setValueForDigitDisplay>
			setValueForDigitDisplay(3, indexThirth);
 238:	6f 2d       	mov	r22, r15
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	8d df       	rcall	.-230    	; 0x158 <setValueForDigitDisplay>
			setValueForDigitDisplay(4, indexFourth);
 23e:	6a e0       	ldi	r22, 0x0A	; 10
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	8a df       	rcall	.-236    	; 0x158 <setValueForDigitDisplay>
			
			wait(10);
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2a df       	rcall	.-428    	; 0x9e <wait>
 24a:	21 97       	sbiw	r28, 0x01	; 1
		char indexThirth = 9; // display 3
		char indexFourth = 9; // display 4
		
		indexFourth = minusToken;
		
		for (int i = 999; i > 0; i-- )
 24c:	a9 f6       	brne	.-86     	; 0x1f8 <showMinusDemo+0x10>
 24e:	93 df       	rcall	.-218    	; 0x176 <countUp>

00000250 <main>:
			setValueForDigitDisplay(4, indexFourth);
			
			wait(10);
		}
		
		countUp();
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	87 bb       	out	0x17, r24	; 23
}

int main()
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
 254:	35 df       	rcall	.-406    	; 0xc0 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 256:	5f df       	rcall	.-322    	; 0x116 <displayDriverInit>
	// clear display (all zero's)
	//adjustDisplayBrightness(200);
	//countDown();
	clearDisplays();
 258:	b9 df       	rcall	.-142    	; 0x1cc <clearDisplays>
 25a:	c6 df       	rcall	.-116    	; 0x1e8 <showMinusDemo>

0000025c <_exit>:
	showMinusDemo();
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
